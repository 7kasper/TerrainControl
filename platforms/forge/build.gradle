// Build script for Terrain Control for Forge

buildscript
{
    repositories
    {
        mavenCentral()
        mavenLocal()
        jcenter() // For Shadow plugin
        maven
        {
            url = "http://files.minecraftforge.net/maven"
        }
        maven
        {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'forge'

// Project properties
archivesBaseName = "terraincontrol-forge"
description = "TerrainControl for Minecraft Forge"
ext.ideProjectName = "TerrainControl-Forge"
ext.forgeVersion = "1.7.2-10.12.0.1057"
minecraft.version = ext.forgeVersion

// The shadow plugin requires all dependencies to be present,
// even though we have set it to only use the Terrain Control dependency.
// When TC is build for the first time on a machine, not all
// dependencies are present yet, because ForgeGradle needs to
// dynamically create them. So we don't launch the Shadow plugin
// when TC is build for the first time.

// Would there be a way to let Shadow run after ForgeGradle has
// completed its task? At the moment Shadow gets it's dependency
// list before anything has a chance to run.
File notFirstTimeBuild = new File("$projectDir/forgeInfo/hasUsed" + ext.forgeVersion + ".flag");
if (notFirstTimeBuild.exists())
{
    apply plugin: 'shadow'

    // Include all Terrain Control files in the jar
    shadow
    {
        artifactAttached = false
        include 'com/khorn/terraincontrol/**'
    }
} else
{
    File buildFlagDir = notFirstTimeBuild.getParentFile()
    if (buildFlagDir.exists() || buildFlagDir.mkdirs())
    {
        notFirstTimeBuild.createNewFile();
    } else
    {
        println(" Could not create directory " + notFirstTimeBuild.getParentFile().getAbsolutePath())
    }
    println(" Skipping Shadow for Forge version, see comment in platforms/forge/build.gradle")
}

repositories
{
    mavenCentral()
    mavenLocal()
}

dependencies
{
    compile project(':common')
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    compile 'io.netty:netty-all:4.0.10.Final'
}

// Replace text in mcmod.info
processResources
{
    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs)
    {
        include 'mcmod.info'

        // Replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // Copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs)
    {
        exclude 'mcmod.info'
    }
}

